# define the padding oracle.
# padding_oracle arguments:
# 1 - first argument must be the initialization vector
# 2 - second argument must be the ciphertext blocks as a string
# padding_oracle return:
# - False in case of invalid padding
# - True in case of valid padding
# - the resulting decrypted block in cases where the decrypted block is leaked. This drastically lowers the amount of required queries.

# Note: usually this function would handle http connections (+ retries after
#  network errors and the like).

padding_oracle = lambda iv, ciphertext: aes_decryption_func_that_verifies_padding(key, iv + ciphertext)

import pypadbuster

# Calculate new IV + ciphertext

(newiv, newciphertext) = pypadbuster.generate_ciphertext('string we want the ciphertext to decrypt to', padding_oracle)

